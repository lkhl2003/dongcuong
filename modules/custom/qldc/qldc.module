<?php
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\DateTime\DrupalDateTime;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;


use Drupal\Core\Controller\ControllerBase;
use PhpOffice\PhpWord\PhpWord;
use PhpOffice\PhpWord\Shared\Html;
use PhpOffice\PhpWord\Style\Font;
use PhpOffice\PhpWord\IOFactory;
use PhpOffice\PhpWord\Settings;
use Drupal\token\TokenInterface;
use Drupal\Core\Language\LanguageManagerInterface;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Config\ConfigFactoryInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\media\Entity\Media;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;

/**
 * Implements hook_entity_insert().
 */
function qldc_entity_presave(Drupal\Core\Entity\EntityInterface $entity)
{
    if ($entity->getEntityTypeId() == 'node' && $entity->isNew() && $entity->getType() == 'xac_nhan_dan_su') {


      $date = DrupalDateTime::createFromFormat('Y-m-d', $entity->field_ngaysinh->value);

      $ngaysinh = $date->format('d/n/Y');
      $now = new DrupalDateTime('now');  // grab current dateTime
$ngay = $now->format('d');
$thang = $now->format('n');
$nam = $now->format('Y');
      $entity->field_noidungxacnhan->value = 'Công an phường Đông Cương xác nhận '.$entity->title->value.', sinh năm '. $ngaysinh .' có hộ khẩu thường trú tại: '. $entity->field_noithuongtru->value .' chấp hành tốt đường lối, chính sách của Đảng, pháp luật của Nhà nước; chưa tiền án, tiền sự; trong quá trình sinh sống tại địa phương từ ngày '.$ngay.' tháng '.$thang.' năm '.($nam-5).' đến ngày '.$ngay.' tháng '.$thang.' năm '.$nam.' chưa có sai phạm, vi phạm gì';

      }
}

/**
 * @file
 * Allows the creation of custom blocks through the user interface.
 */
function qldc_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
    //dsm($form_id);
    if ($form_id == 'node_congdan_form') {
        $form['#theme'] = 'dongcuong_node_congdan_form';
        $form['#cache'] = ['max-age' => 0];
    }

    if ($form_id == 'node_xac_nhan_dan_su_form') {
        $form['#prefix'] = '<div id="form_dan_su">';
        $form['#suffix'] = '</div>';
        $form['#theme'] = 'dongcuong_node_xac_nhan_dan_su_form';
        $form['#cache'] = ['max-age' => 0];

        $form['qldc_nid'] = array(
            '#type' => 'hidden',
            '#value' => '',
         );

        $form['title']['widget'][0]['value']['#autocomplete_route_name'] = 'qldc.autocomplete';
        $form['title']['widget'][0]['value']['#ajax'] = [
          'wrapper' => 'form_dan_su',
          'event' => 'autocompleteclose',
          'callback' => 'qldc_myAjaxCallback',
          'disable-refocus' => false,
        ];
    }
}

function qldc_options_list_alter(array &$options, array $context)
{
    unset($options['_none']);
}

function qldc_myAjaxCallback(array &$form, FormStateInterface $form_state)
{
    //\Drupal::logger('qldc')->notice('Set noi thuong tru here.');
    $hovaten = $form_state->getValue('title');

    $hovaten_nid = explode('-', $hovaten[0]['value']);
    if(isset($hovaten_nid[1])) {
        $nid = $hovaten_nid[1];
        $node = \Drupal\node\Entity\Node::load($nid);

        $form['title']['widget'][0]['value']['#value'] = $node->get('title')->getValue()[0]['value'];
        $form['field_ngaysinh']['widget'][0]['value']['date']['#value'] = $node->get('field_ngaysinh')->getValue()[0]['value'];
        $form['field_noithuongtru']['widget'][0]['value']['#value'] = $node->get('field_noithuongtru')->getValue()[0]['value'];
    }
    return $form;
}

function nodeWord($node_id = null)
{
    $node = $this->entityTypeManager->getStorage("node")->load($node_id);
    $language = $this->languageManager->getCurrentLanguage()->getId();
    // Get the data from config settings.
    $config = $this->configFactory->get('entity_word.settings');
    $doc_filename = $this->token->replace(
        $config->get('entity_word_filename'),
        [$node->getEntityTypeId() => $node], ['langcode' => $language]
    );

    // Get file attachment link in document.
    $attached_media_url = '';
    if ($node->hasField('field_attach_pdf') && !$node->get('field_attach_pdf')->isEmpty()) {
        $media_target_id = isset($node->get('field_attach_pdf')->getValue()[0]['target_id']) ? $node->get('field_attach_pdf')->getValue()[0]['target_id'] : '';
        $attached_media_url = $this->mediaUrl($media_target_id);
    }

    // Instantiation of the class PhpWord.
    Settings::setOutputEscapingEnabled(true);
    $phpWord = new PhpWord();
    $section = $phpWord->addSection(
        [
        'paperSize' => $config->get('entity_word_papersize'),
        'marginLeft' => $config->get('entity_word_margin_left'),
        'marginRight' => $config->get('entity_word_margin_right'),
        'marginTop' => $config->get('entity_word_margin_top'),
        'marginBottom' => $config->get('entity_word_margin_bottom'),
        'headerHeight' => 0,
        'footerHeight' => 0,
        ]
    );
    // Defining font style of the title and body.
    $fontStyle = new Font();
    $fontStyle->setBold(true);
    $fontStyle->setName($config->get('entity_word_font_family'));
    $fontStyle->setColor($config->get('entity_word_font_color'));
    $fontStyle->setSize($config->get('entity_word_font_size'));
    $textElement = $section->addText($node->title->value);
    $textElement->setFontStyle($fontStyle);
    $textElement = $section->addTextRun();
    if(!empty($node->body->value)) {
        $body_text = str_replace(
            "<p>",
            "<p style='" . $config->get('entity_word_paragraph_style') . "'>",
            $node->body->value
        );
        $body_text = preg_replace('/(<[^>]+) style=".*?"/i', '$1', $body_text);
        Html::addHtml($section, $body_text, false, false);

    }
    if (!empty($attached_media_url)) {
        $textElement = $section->addTextRun();
        $attached_media_url = '<a href="' . $attached_media_url . '">' . $attached_media_url . '</a>';
        Html::addHtml($section, $attached_media_url, false, false);
    }

    /* [OR FORCE DOWNLOAD] */
    header('Content-Description: File Transfer');
    header('Content-Type: application/octet-stream');
    header('Content-Disposition: attachment;filename="' . $doc_filename . '"');
    header('Content-Transfer-Encoding: binary');
    header('Connection: Keep-Alive');
    header('Expires: 0');
    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
    header('Pragma: public');
    $objWriter = IOFactory::createWriter($phpWord, 'Word2007');
    ob_clean();
    $objWriter->save('php://output');
    exit;
}

/**
 * Process media url.
 *
 * @param int $target_id
 *   Media target id of the file.
 */
function mediaUrl($target_id)
{
    if ($target_id) {
        $media = Media::load($target_id);
        $fid = $media->getSource()->getSourceFieldValue($media);
        $file = $this->entityTypeManager->getStorage('file')->load($fid);
        return $file->toUrl()->toString();
    }
}
